// Generated by CoffeeScript 1.6.2
(function() {
  define(['jquery', 'underscore', 'backbone', 'hammer', 'views/controls/switch', 'models/controlModel'], function($, _, Backbone, hammer, SwitchView, ControlModel) {
    var ControllerView;

    ControllerView = Backbone.View.extend({
      el: '#view',
      log: function(words) {
        return console.log(words);
      },
      currentpane: 0,
      offset: 0,
      panes: 0,
      fullscreen: false,
      initialize: function() {
        var _this = this;

        console.log('new controller view!');
        console.log(this.model);
        this.listenTo(this.model, 'controller:load', this.doLayout);
        $(window).on('resize', function() {
          return _this.calcControlSize();
        });
        if (navigator.standalone) {
          return this.iospadding();
        }
      },
      render: function() {
        var _this = this;

        this.thisPane = 0;
        this.$el.append('<div class="pane"></div>');
        this.panes += 1;
        this.model.collection.each(function(elem, idx) {
          var ViewProto, controlView;

          ViewProto = elem.get('viewProto');
          controlView = elem.view = new ViewProto({
            model: elem,
            controllerView: _this
          });
          _this.$el.find('.pane').last().append(controlView.render());
          controlView.setSize();
          _this.thisPane += 1;
          return _this.checkPane();
        });
        return this.registerEvents();
      },
      calcControlSize: function() {
        var _this = this;

        return this.model.collection.each(function(elem, idx) {
          return elem.view.setSize();
        });
      },
      checkPane: function() {
        var pos;

        this.log(this.thisPane);
        if (this.thisPane === 4) {
          this.$el.append('<div class="pane"></div>');
          pos = 100 * this.panes + '%';
          this.$el.find('.pane').last().css({
            left: pos
          });
          this.panes += 1;
          return this.thisPane = 0;
        }
      },
      doLayout: function() {
        var panes;

        panes = Math.ceil(this.model.collection.length / 4);
        this.log(panes);
        return this.render();
      },
      scroll: function() {
        return this.$el.find('.pane').animate({
          left: '-=100%'
        }, 200);
      },
      registerEvents: function() {
        var _this = this;

        hammer(this.el).on('drag', function(e) {
          _this.log(_this.fullscreen);
          if (!_this.fullscreen) {
            return _this.$el.find('.pane').css({
              'margin-left': -_this.offset + e.gesture.deltaX
            });
          }
        });
        return hammer(this.el).on('dragend', function(e) {
          if (!_this.fullscreen) {
            _this.log(e.gesture.deltaX);
            if (Math.abs(e.gesture.deltaX / window.outerWidth) > 0.5) {
              if (e.gesture.deltaX > 0) {
                return _this.lastPane();
              } else {
                return _this.nextPane();
              }
            } else {
              console.log('Dont go anywhere');
              return _this.goToPane();
            }
          }
        });
      },
      nextPane: function() {
        if (this.currentpane < this.panes - 1) {
          this.currentpane += 1;
          this.offset = this.currentpane * window.outerWidth;
        }
        return this.goToPane();
      },
      lastPane: function() {
        if (this.currentpane > 0) {
          this.currentpane -= 1;
          this.offset = this.currentpane * window.outerWidth;
        }
        return this.goToPane();
      },
      goToPane: function() {
        this.log(-this.currentpane * window.outerWidth);
        this.log(this.$el.find('.pane'));
        return this.$el.find('.pane').animate({
          'margin-left': -this.currentpane * window.outerWidth
        }, 200);
      },
      pickSizes: function() {
        var height, width;

        width = window.outerWidth;
        height = window.outerHeight;
        return console.log([width, height]);
      },
      iospadding: function() {
        return $('#view').css({
          top: 16,
          height: $('#view').height() - 16
        });
      }
    });
    return ControllerView;
  });

}).call(this);
